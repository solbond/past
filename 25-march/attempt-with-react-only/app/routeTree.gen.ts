/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NewEditImport } from './routes/new-edit'
import { Route as AppRouteImport } from './routes/_app/route'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as AppNewImport } from './routes/_app/new'
import { Route as AppAuthImport } from './routes/_app/auth'
import { Route as AppProfileIndexImport } from './routes/_app/profile/index'
import { Route as AppProfileNewImport } from './routes/_app/profile/new'
import { Route as AppProfileAuthImport } from './routes/_app/profile/auth'
import { Route as AppProfileprofileIdProductproductIdImport } from './routes/_app/profile/:profileId/product/:productId'

// Create/Update Routes

const NewEditRoute = NewEditImport.update({
  id: '/new-edit',
  path: '/new-edit',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppNewRoute = AppNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppAuthRoute = AppAuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProfileIndexRoute = AppProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProfileNewRoute = AppProfileNewImport.update({
  id: '/profile/new',
  path: '/profile/new',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProfileAuthRoute = AppProfileAuthImport.update({
  id: '/profile/auth',
  path: '/profile/auth',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppProfileprofileIdProductproductIdRoute =
  AppProfileprofileIdProductproductIdImport.update({
    id: '/profile/:profileId/product/:productId',
    path: '/profile/:profileId/product/:productId',
    getParentRoute: () => AppRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/new-edit': {
      id: '/new-edit'
      path: '/new-edit'
      fullPath: '/new-edit'
      preLoaderRoute: typeof NewEditImport
      parentRoute: typeof rootRoute
    }
    '/_app/auth': {
      id: '/_app/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AppAuthImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/new': {
      id: '/_app/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof AppNewImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/profile/auth': {
      id: '/_app/profile/auth'
      path: '/profile/auth'
      fullPath: '/profile/auth'
      preLoaderRoute: typeof AppProfileAuthImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/profile/new': {
      id: '/_app/profile/new'
      path: '/profile/new'
      fullPath: '/profile/new'
      preLoaderRoute: typeof AppProfileNewImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/profile/': {
      id: '/_app/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/profile/:profileId/product/:productId': {
      id: '/_app/profile/:profileId/product/:productId'
      path: '/profile/:profileId/product/:productId'
      fullPath: '/profile/:profileId/product/:productId'
      preLoaderRoute: typeof AppProfileprofileIdProductproductIdImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppAuthRoute: typeof AppAuthRoute
  AppNewRoute: typeof AppNewRoute
  AppIndexRoute: typeof AppIndexRoute
  AppProfileAuthRoute: typeof AppProfileAuthRoute
  AppProfileNewRoute: typeof AppProfileNewRoute
  AppProfileIndexRoute: typeof AppProfileIndexRoute
  AppProfileprofileIdProductproductIdRoute: typeof AppProfileprofileIdProductproductIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppAuthRoute: AppAuthRoute,
  AppNewRoute: AppNewRoute,
  AppIndexRoute: AppIndexRoute,
  AppProfileAuthRoute: AppProfileAuthRoute,
  AppProfileNewRoute: AppProfileNewRoute,
  AppProfileIndexRoute: AppProfileIndexRoute,
  AppProfileprofileIdProductproductIdRoute:
    AppProfileprofileIdProductproductIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppRouteRouteWithChildren
  '/new-edit': typeof NewEditRoute
  '/auth': typeof AppAuthRoute
  '/new': typeof AppNewRoute
  '/': typeof AppIndexRoute
  '/profile/auth': typeof AppProfileAuthRoute
  '/profile/new': typeof AppProfileNewRoute
  '/profile': typeof AppProfileIndexRoute
  '/profile/:profileId/product/:productId': typeof AppProfileprofileIdProductproductIdRoute
}

export interface FileRoutesByTo {
  '/new-edit': typeof NewEditRoute
  '/auth': typeof AppAuthRoute
  '/new': typeof AppNewRoute
  '/': typeof AppIndexRoute
  '/profile/auth': typeof AppProfileAuthRoute
  '/profile/new': typeof AppProfileNewRoute
  '/profile': typeof AppProfileIndexRoute
  '/profile/:profileId/product/:productId': typeof AppProfileprofileIdProductproductIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/new-edit': typeof NewEditRoute
  '/_app/auth': typeof AppAuthRoute
  '/_app/new': typeof AppNewRoute
  '/_app/': typeof AppIndexRoute
  '/_app/profile/auth': typeof AppProfileAuthRoute
  '/_app/profile/new': typeof AppProfileNewRoute
  '/_app/profile/': typeof AppProfileIndexRoute
  '/_app/profile/:profileId/product/:productId': typeof AppProfileprofileIdProductproductIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/new-edit'
    | '/auth'
    | '/new'
    | '/'
    | '/profile/auth'
    | '/profile/new'
    | '/profile'
    | '/profile/:profileId/product/:productId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/new-edit'
    | '/auth'
    | '/new'
    | '/'
    | '/profile/auth'
    | '/profile/new'
    | '/profile'
    | '/profile/:profileId/product/:productId'
  id:
    | '__root__'
    | '/_app'
    | '/new-edit'
    | '/_app/auth'
    | '/_app/new'
    | '/_app/'
    | '/_app/profile/auth'
    | '/_app/profile/new'
    | '/_app/profile/'
    | '/_app/profile/:profileId/product/:productId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  NewEditRoute: typeof NewEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  NewEditRoute: NewEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/new-edit"
      ]
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/auth",
        "/_app/new",
        "/_app/",
        "/_app/profile/auth",
        "/_app/profile/new",
        "/_app/profile/",
        "/_app/profile/:profileId/product/:productId"
      ]
    },
    "/new-edit": {
      "filePath": "new-edit.tsx"
    },
    "/_app/auth": {
      "filePath": "_app/auth.tsx",
      "parent": "/_app"
    },
    "/_app/new": {
      "filePath": "_app/new.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/profile/auth": {
      "filePath": "_app/profile/auth.tsx",
      "parent": "/_app"
    },
    "/_app/profile/new": {
      "filePath": "_app/profile/new.tsx",
      "parent": "/_app"
    },
    "/_app/profile/": {
      "filePath": "_app/profile/index.tsx",
      "parent": "/_app"
    },
    "/_app/profile/:profileId/product/:productId": {
      "filePath": "_app/profile/:profileId/product/:productId.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
